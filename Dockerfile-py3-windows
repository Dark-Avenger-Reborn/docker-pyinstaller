FROM --platform=$TARGETPLATFORM ubuntu:24.04

LABEL maintainer="ozabramovs@gmail.com"
ENV DEBIAN_FRONTEND=noninteractive

ARG TARGETPLATFORM
ARG WINE_VERSION=winehq-devel
ARG PYTHON_VERSION=3.13.0
ARG PYINSTALLER_VERSION=6.11.1

# Common dependencies
RUN apt-get update -qy && apt-get install --no-install-recommends -qy \
    apt-transport-https software-properties-common wget gpg-agent \
    build-essential cmake git rename cabextract

# For amd64 platform
RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
      dpkg --add-architecture i386 && \
      wget -O /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key && \
      wget -NP /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/noble/winehq-noble.sources && \
      apt-get update -qy && apt-get install -qy $WINE_VERSION winbind; \
    fi

# For ARM platforms
RUN if [ "$TARGETPLATFORM" = "linux/arm/v7" ] || [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
      apt-get update -qy && apt-get install --no-install-recommends -qy build-essential cmake git; \
      git clone https://github.com/ptitSeb/box86 /tmp/box86 && \
      cd /tmp/box86 && mkdir build && cd build && \
      cmake .. -DARM_DYNAREC=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo && \
      make -j$(nproc) && make install; \
      git clone https://github.com/ptitSeb/box64 /tmp/box64 && \
      cd /tmp/box64 && mkdir build && cd build && \
      cmake .. -DARM_DYNAREC=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo && \
      make -j$(nproc) && make install; \
    fi


# Wine settings
ENV WINEARCH=win64
ENV WINEDEBUG=fixme-all
ENV WINEPREFIX=/wine

# PYPI repository location
ENV PYPI_URL=https://pypi.python.org/
ENV PYPI_INDEX_URL=https://pypi.python.org/simple

# Install Wine and Winetricks for amd64
RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
      dpkg --add-architecture i386 && \
      apt-get update -qy && \
      apt-get install --no-install-recommends -qy $WINE_VERSION winbind cabextract wget && \
      wget -nv https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks -O /usr/local/bin/winetricks && \
      chmod +x /usr/local/bin/winetricks; \
    fi


# Python installation
RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
      # Install Python using Wine MSI packages
      winetricks win10 && \
      for msifile in core dev exe lib path pip tcltk; do \
        wget -nv "https://www.python.org/ftp/python/$PYTHON_VERSION/amd64/${msifile}.msi"; \
        wine msiexec /i "${msifile}.msi" /qb TARGETDIR=C:/Python3; \
        rm ${msifile}.msi; \
      done && \
      cd /wine/drive_c/Python3 && \
      echo 'wine '\''C:\Python3\python.exe'\'' "$@"' > /usr/bin/python && \
      echo 'wine '\''C:\Python3\Scripts\easy_install.exe'\'' "$@"' > /usr/bin/easy_install && \
      echo 'wine '\''C:\Python3\Scripts\pip.exe'\'' "$@"' > /usr/bin/pip && \
      echo 'wine '\''C:\Python3\Scripts\pyinstaller.exe'\'' "$@"' > /usr/bin/pyinstaller && \
      echo 'wine '\''C:\Python3\Scripts\pyupdater.exe'\'' "$@"' > /usr/bin/pyupdater && \
      echo 'assoc .py=PythonScript' | wine cmd && \
      echo 'ftype PythonScript=c:\Python3\python.exe "%1" %*' | wine cmd && \
      while pgrep wineserver >/dev/null; do echo "Waiting for wineserver"; sleep 1; done && \
      chmod +x /usr/bin/python /usr/bin/easy_install /usr/bin/pip /usr/bin/pyinstaller /usr/bin/pyupdater; \
    else \
      # Install native Python for ARM
      apt-get install -qy python3 python3-pip; \
    fi

# Install Microsoft Visual C++ Redistributable for Visual Studio 2017 (x64 only)
RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
      W_TMP="/wine/drive_c/windows/temp/_$0" && \
      mkdir -p "$W_TMP" && \
      wget -P "$W_TMP" https://download.visualstudio.microsoft.com/download/pr/11100230/15ccb3f02745c7b206ad10373cbca89b/VC_redist.x64.exe && \
      cabextract -q --directory="$W_TMP" "$W_TMP/VC_redist.x64.exe" && \
      cabextract -q --directory="$W_TMP" "$W_TMP/a10" && \
      cabextract -q --directory="$W_TMP" "$W_TMP/a11" && \
      cd "$W_TMP" && \
      rename 's/_/\-/g' *.dll && \
      cp "$W_TMP"/*.dll /wine/drive_c/windows/system32/; \
    fi

# Install PyInstaller (all architectures)
RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
      /usr/bin/pip install --no-cache-dir pyinstaller==$PYINSTALLER_VERSION; \
    else \
      pip3 install --no-cache-dir pyinstaller==$PYINSTALLER_VERSION; \
    fi

# Set up source directory
RUN mkdir /src/ && ln -s /src /wine/drive_c/src
VOLUME /src/
WORKDIR /wine/drive_c/src/
RUN mkdir -p /wine/drive_c/tmp

# Add entrypoint script
COPY entrypoint-windows.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
